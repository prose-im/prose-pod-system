#!/bin/bash

##
#  This file is part of prose-pod-system
#
#  Copyright 2025, Prose Foundation
##

set -e

# ===== CONSTANTS =====

: ${SELF:="$(basename $0)"}

: ${REPOSITORY_ROOT:="$(dirname "$0")"/..};
VERSION_FILE="${REPOSITORY_ROOT:?}"/VERSION

VERSION="$(cat "${VERSION_FILE:?}")"

# ===== HELPER FUNCTIONS =====

source "${REPOSITORY_ROOT:?}"/scripts/tools/colors.sh
source "${REPOSITORY_ROOT:?}"/scripts/tools/log.sh
source "${REPOSITORY_ROOT:?}"/scripts/tools/find-replace-versions.sh

description() {
	cat <<EOF
${Bold}Creates a new Prose Pod release.${Bold_Off}

This script bumps the version number, then adds and pushes a tag to origin.
EOF
}

usage() {
	cat <<EOF
Usage: ${SELF:?} major|minor|patch [--help]
EOF
}

help() {
	printf "$(description)\n"
	echo ''
	printf "$(usage)\n"
	exit 0
}

commit_message() {
	cat <<EOF
${NEW_VERSION:?}

Internal versions:

- Dashboard: $(find_version_dashboard)
- API: $(find_version_api)
- Server: $(find_version_server)
EOF
}

# ===== ARGUMENT PARSING =====

VERSION_COMPONENTS=($(echo "${VERSION:?}" | tr '.' ' '))

case "$1" in
	major)
		VERSION_COMPONENTS[0]=$(( VERSION_COMPONENTS[0] + 1 ))
		VERSION_COMPONENTS[1]=0
		VERSION_COMPONENTS[2]=0
		;;
	minor)
		VERSION_COMPONENTS[1]=$(( VERSION_COMPONENTS[1] + 1 ))
		VERSION_COMPONENTS[2]=0
		;;
	patch)
		VERSION_COMPONENTS[2]=$(( VERSION_COMPONENTS[2] + 1 ))
		;;
	--help) help ;;
	'') error 'Expected at least one argument (`major`, `minor` or `patch`).'; echo "$(usage)"; die ;;
	*) error "Unknown argument: $1."; echo "$(usage)"; die ;;
esac
# Skip first argument now that it's processed.
shift 1

for arg in "$@"; do
	case $arg in
		--force) FORCE=1 ;;
		--help) help ;;
		*) error "Unknown argument: $arg."; echo "$(usage)"; die ;;
	esac
done

# ===== MAIN LOGIC =====

# Ensure there are no uncommitted changes.
if [ -z "$FORCE" ]; then
	git diff-index --quiet HEAD || die "Your index contains uncommitted changes. Please commit or stash them before creating a release."
fi

# Convert the new version to a string.
NEW_VERSION=$(echo "${VERSION_COMPONENTS[*]}" | tr ' ' '.')

# Log some useful info.
echo -e "Pod version: ${Yellow:?}${VERSION:?}${Color_Off:?} -> ${Green:?}${NEW_VERSION:?}${Color_Off:?}"
echo "New commits:"
git --no-pager log --reverse --no-merges \
  --format="- %C(auto)%h %s %C(green)(%ad)%C(reset)" --date=short --color \
  "${VERSION:?}"..HEAD

# Update version number in files.
echo "Changing version number in ${VERSION_FILE:?}…"
echo "${NEW_VERSION:?}" > "${VERSION_FILE:?}"

# Create & push a new git tag.
GIT_BRANCH="$(git branch --show-current)"
COMMIT_MESSAGE="$(commit_message)"
echo "Pulling origin…"
git pull origin "${GIT_BRANCH:?}"
echo "Committing changes…"
git add "${VERSION_FILE:?}"
git commit -m "${COMMIT_MESSAGE:?}"
echo "Creating tag…"
git tag "${NEW_VERSION:?}" -m "${COMMIT_MESSAGE:?}"
echo "Pushing tag…"
git push --atomic origin "${GIT_BRANCH:?}" "${NEW_VERSION:?}"

echo "Successfully created and pushed tag '${NEW_VERSION:?}'"
